The Context Package
	Purpose:	
		- Cancellation and propagation
		- Send Values

Package Name : context.go

Incoming requests to a server should create a Context, and outgoing calls to servers should accept a Context. 
The chain of function calls between them must propagate the Context, 
optionally replacing it with a derived Context created using WithCancel, WithDeadline, WithTimeout, or WithValue. 
When a Context is cancelled, all Contexts derived from it are also canceled.

Rules:
- Do not store Contexts inside a struct type; instead, pass a Context explicitly to each function that needs it. 
  The Context should be the first parameter, typically named ctx
- Do not pass a nil Context, even if a function permits it. Pass context.TODO if you are unsure about which Context to use.
- Use context Values only for request-scoped data that transits processes and APIs, 
   not for passing optional parameters to functions.
- The same Context may be passed to functions running in different goroutines; 
  Contexts are safe for simultaneous use by multiple goroutines.

Function 
func WithCancel(parent Context) (ctx Context, cancel CancelFunc)
	- Canceling this context releases resources associated with it, 
	  so code should call cancel as soon as the operations running in this Context complete.

func WithDeadline(parent Context, d time.Time) (Context, CancelFunc)
	- If the parent's deadline is already earlier than d, WithDeadline(parent, d) is semantically equivalent to parent. 

func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)

type CancelFunc

type Context
    func Background() Context
	- Background returns a non-nil, empty Context. It is never canceled, has no values, and has no deadline. 
	  It is typically used by the main function, initialization, and tests, 
          and as the top-level Context for incoming requests.
    
    func TODO() Context
    	-TODO returns a non-nil, empty Context. Code should use context.
         TODO when it's unclear which Context to use or it is not yet available 
         (because the surrounding function has not yet been extended to accept a Context parameter). 
         TODO is recognized by static analysis tools that determine whether Contexts are propagated correctly in a program.
    
    func WithValue(parent Context, key, val interface{}) Context
	- WithValue returns a copy of parent in which the value associated with key is val.

Code 
ctx := context.Background() // Create concext
ctx, cancel := context.WithCancel(ctx)
cancel() - // Alway  do after finish like defer, it free all resource of context	


ctx, cancel := context.WithCancel(ctx)
ctx, cancel := context.WithTimeout(ctx, time.Second*10)
ctx, cancel := context.WithTimeout(ctx, 3*time.Second)

